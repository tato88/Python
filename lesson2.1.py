# // Дан массив целых чисел, найдите тот, который встречается нечетное количество раз.
# // Всегда будет только одно целое число, которое встречается нечетное количество раз
# //     [1,2,3,4,5,2,4,1,3] -> 5
#

# numbs_list = [7, 22, 3, 4, 22, 22, 4, 7, 3]
#
#
# def find_num(array: list) -> int:
#     counter_list = []
#     num = 999
#     for i in array:
#         counter = 0
#
#         for j in array:
#             if i == j:
#                 counter += 1
#         counter_list.append({i: counter})
#         if counter % 2 == 1:
#             num = i
#     return num
#
#
# print(find_num(numbs_list))


# **************************************************************************************
# **************************************************************************************
# **************************************************************************************

#
# // Знайти анаграму.
# //     Перевірити чи слово має в собі такі самі літери як і поеперднє слово.
# //
# //     ANAGRAM | MGANRAA -> true
# // EXIT | AXET -> false
# // GOOD | DOGO -> true

# w1 = 'shopopalo'
# w2 = 'opaloshop'
# w5 = 'astanavites'
# w6 = 'asaanavites'
#
# def anagram(word1: str, word2: str) -> bool:
#     if len(word1) == len(word2):
#         if sorted(word1) == sorted(word2):
#             return True
#         else:
#             return False
#     else:return False
#
# print(anagram(w1, w2))
# print(anagram(w5, w6))


# **************************************************************************************
# **************************************************************************************
# **************************************************************************************

# // Точная степень двойки
# // Дано натуральное число N.
# //     Выведите слово YES, если число N является точной степенью двойки, или слово NO в противном случае.
# //     Операцией возведения в степень пользоваться нельзя!

# n = 133
#
# def is_pow(num):
#     if num / 2 == 2:
#         print('yes')
#     else:
#         if num < 2:
#             print('NO')
#             return
#         num = num / 2
#         is_pow(num)
#
#
# is_pow(n)


# **************************************************************************************
# **************************************************************************************
# **************************************************************************************

# # //  Сумма цифр числа
# # // Дано натуральное число N. Вычислите сумму его цифр.
# # //     При решении этой задачи нельзя использовать строки,
# # //     списки, массивы ну и циклы, разумеется.
# # //     Рекурсія)
#
# def test(n):
#     if n > 9:
#         print(n % 10)
#         x = n % 10 + test(n // 10)
#     else:
#         return n
#     return x
#
#
# def sum_digits(n):
#     return n % 10 + sum_digits(n // 10) if n > 9 else n
#
#
# print(test(54321))
# print(sum_digits(2442))

# **************************************************************************************
# **************************************************************************************
# **************************************************************************************

# # // Палиндром
# # // Дано слово, состоящее только из строчных латинских букв. Проверьте, является ли это слово палиндромом. Выведите YES или NO.
# # //     При решении этой задачи нельзя пользоваться циклами, в решениях на питоне нельзя использовать срезы с шагом, отличным от 1.
#
#
# word = 'aztecetZa'
#
# def is_palindrom(w):
#     return 'YES' if ''.join(reversed(w.upper())) == w.upper() else 'No'
#
# print(is_palindrom(word))

# **************************************************************************************
# **************************************************************************************
# **************************************************************************************

# # // Количество единиц
# # // Дана последовательность натуральных чисел  в строке, завершающаяся двумя числами 0 подряд.
# # // Определите, сколько раз в этой последовательности встречается число 1. Числа, идущие после двух нулей, необходимо игнорировать.
# # //
# # // 2176491947586100 -> 3
#
#
# def calc_one(wordnum):
#     counter = 0
#     for i in range(len(wordnum)):
#         res = wordnum[i:i+2]
#         a, b = res
#         if a == '1':
#             counter += 1
#         if res == '00':
#             return counter
#
#
# print(calc_one('21786100123'))


# **************************************************************************************
# **************************************************************************************
# **************************************************************************************


# # // Знайти набільший елемент в масиві за допомогою reduce
# # //     [1,6,9,0,17,88,4,7] -> 88
#
# from functools import reduce
#
#
# def find_max(a, b):
#     return a if a > b else b
#
#
# print(reduce(find_max, [1, 6, 9, 0, 17, 88, 4, 7]))


# **************************************************************************************
# **************************************************************************************
# **************************************************************************************


# # // Вирівняти багаторівневий масив в однорівневий
# # //     [1,3, ['Hello, 'Wordd', [9,6,1]], ['oops'], 9] -> [1, 3, 'Hello, 'Wordd', 9, 6, 1, 'oops', 9]
# # // flat використовувати заборонено.
#
#
# def one_lane_list(random: list) -> list:
#     new_list = []
#
#     def inner(x):
#         for i in range(len(x)):
#             if type(x[i]) != list:
#                 new_list.append(x[i])
#             else:
#                 inner(x[i])
#
#     inner(random)
#     return new_list
#
#
# print(one_lane_list([[6, 3], 3, ['Hello', 'Wordd', [9, 6, 1]], ['oops'], 9]))
